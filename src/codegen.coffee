convert   = require 'convert-source-map'
escodegen = require 'escodegen'

defaults = (opts) ->
  if opts.minify?
    comment: no
    format:
      indent:
        style: ''
        base: 0
      compact:     true
      escapeless:  true
      hexadecimal: true
      parentheses: false
      quotes:      'auto'
      renumber:    true
      semicolons:  false
  else
    comment: true
    format:
      indent:
        style: '  '
        base: 0
      compact:     false
      escapeless:  true
      parentheses: false
      quotes:      'auto'
      semicolons:  false

# Generate source code (and optionally source map) from AST
module.exports = (ast, opts = {}) ->
  # Set up default opts
  opts = Object.assign (defaults opts), opts

  # Minify
  if opts.minify?
    esmangle  = require 'esmangle'
    optimized = esmangle.optimize ast, null
    ast       = esmangle.mangle optimized

  # Source maps
  if opts.sourceMap
    opts.sourceMap         ?= true
    opts.sourceMapWithCode ?= true
    opts.sourceMapRoot     ?= opts.sourceRoot ? ''

  # Generate code, source maps
  {code, map} = escodegen.generate ast, opts

  # Strip debug comments
  if opts.stripDebug
    # AST generated by acorn doesn't seem to be compatible with the underlying
    # libraries used by strip-debug, so we pass in the generated code instead
    code = require('strip-debug')(code).toString()

  # Return generated code without source map
  unless opts.sourceMap
    return code

  # Return generated code with source map as comment
  unless opts.externalSourceMap
    return code + convert.fromObject(map).toComment()

  # Return object if external source map requested
  if opts.sourceMapURL?
    code += '\n//# sourceMappingURL=' + opts.sourceMapURL

  code: code
  map:  convert.fromObject(map).toJSON()
