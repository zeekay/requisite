acorn = require 'esprima'
fs    = require 'fs'
path  = require 'path'

compilers       = require './compilers'
resolve         = require './resolve'
{codegen, walk} = require './utils'

class Module
  @moduleCache = {}

  constructor: (requiredAs, options = {}) ->
    # relative or unqualified require to module
    @requiredAs = requiredAs

    # absolute path to module requiring us
    @requiredBy     = options.requiredBy

    # compiler/extension options
    @compilers    = options.compilers ? compilers
    @extensions   = ('.' + ext for ext of compilers)

    # async, whether or not to include in bundled modules
    @async        = options.async ? false
    @exclude      = options.exclude

    # ast / source generated by @parse()
    @ast          = null
    @source       = null

    # modules that this module depends on
    @dependencies = {}

    # modules that depend on this one
    @dependents = {}

    # Optionally passed in if resolved in advance
    @absolutePath   = options.absolutePath
    @basePath       = options.basePath
    @normalizedPath = options.normalizedPath
    @requireAs      = options.requireAs

  # resolve paths
  resolve: ->
    @[k] = v for k, v of resolve @requiredAs,
      requiredBy: @requiredBy
      basePath:   @basePath

  # source wrapped in define statement.
  wrap: ->
    ast = acorn.parse """
      // source: #{@absolutePath}
      require.#{if @async then 'async' else 'define'}("#{@requireAs}", function(module, exports, __dirname, __filename) {
        // replaced with source
      });
      """
    walk ast, (node) =>
      if node.type == 'BlockStatement'
        node.body = @ast.body
    @ast = ast

  # compile source using appropriately compiler
  compile: (callback) ->
    unless @absolutePath? and @normalizedPath?
      @resolve()

    fs.stat @absolutePath, (err, stat) =>
      throw err if err

      if @mtime? and @mtime < stat.mtime
        return callback()

      @mtime = stat.mtime
      extension = (path.extname @absolutePath).substr 1

      fs.readFile @absolutePath, 'utf8', (err, source) =>
        unless (compiler = @compilers[extension])?
          throw new Error "No suitable compiler found for #{@absolutePath}"

        # call compiler with a reference to this module
        compiler.call @, {source: source, filename: @normalizedPath}, (err, source, sourceMap) =>
          throw err if err

          @source = source
          @sourceMap = sourceMap

          callback()

  # parse source file into ast
  parse: (options, callback) ->
    if typeof options == 'function'
      [callback, options] = [options, {}]

    options.deep ?= true

    unless @source?
      return @compile => @parse callback

    # parse source to AST
    @ast = acorn.parse @source,
      locations: true
      sourceFile: @normalizedPath

    # transform AST to use root-relative paths
    dependencies = @transform()

    # wrap module in define
    @wrap()

    # cache ourself
    Module.moduleCache[@requireAs] = @

    if options.deep
      # parse dependencies into fully-fledged modules
      @traverse dependencies, callback

  # transform require expressions in AST to use root-relative paths
  transform: ->
    dependencies = []
    walk @ast, (node) =>
      if node.type == 'CallExpression' and node.callee.name == 'require'
        [required, callback] = node.arguments

        if required.type == 'Literal' and typeof required.value is 'string'
          module = resolve required.value,
            basePath:   @basePath
            extensions: @extensions
            requiredAs: required.value
            requiredBy: @absolutePath

          # transform node
          required.value = module.requireAs

          # is async?
          module.async = callback?

          # add to list of dependencies
          dependencies.push module
        return true
    dependencies

  # traverse dependencies recursively, parsing them as well
  traverse: (dependencies, callback) ->
    return callback() if dependencies.length == 0

    mod = dependencies.shift()

    # already seen this module, or it's excluded, continue
    if @dependencies[mod.requireAs]? or @exclude? and @exclude.test mod.requireAs
      return @traverse dependencies, callback

    # use cached module if previously parsed by someone else
    if (cached = @find mod.requireAs)?
      @dependencies[mod.requireAs] = cached
      cached.dependents[@requireAs] = @
      @append cached
      return @traverse dependencies, callback

    # create module and parse it baby
    mod = new Module mod.requiredAs, mod
    mod.exclude = @exclude
    mod.dependents[@requireAs] = @
    @dependencies[mod.requireAs] = mod

    # continue
    mod.parse =>
      # append parsed module to our AST
      @append mod
      @traverse dependencies, callback

  append: (mod) ->
    if mod.ast?.body?
      for node in mod.ast.body
        @ast.body.push node

  find: (requireAs) ->
    query = requireAs.replace /^\//, ''
    Module.moduleCache[query]

  toString: (options) ->
    codegen @ast, options

for k,v of Module::
  do (k,v) ->
    Module::[k] = ->
      # console.log 'Module#' + k, (Array::slice.call arguments, 0).join ','
      v.apply @, arguments

module.exports = Module
